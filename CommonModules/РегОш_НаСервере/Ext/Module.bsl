
////////////////////////////////////////////////////////////////////////////////
//
// Процедура ОбработатьДамп
//
// Описание: 	Вызывается из http-сервиса PushReport. 
// 				Вытаскивает информацию из zip-файла полученного по PushReport.
//				Создает задачу, прицепляет к задаче файлы.
//
// Параметры:
// ДанныеОтчета - Двоичные данные
//
Процедура ОбработатьДамп(ДанныеОтчета) Экспорт 
	ИнформацияОтчета = ПолучитьИнформациюИзОтчета(ДанныеОтчета);
	ИнформацияОтчетаСтруктура = ИнформацияОтчета.ReportStructure;
	
	АппСтэк = ЗначениеСвойства(ИнформацияОтчетаСтруктура, "errorInfo.applicationErrorInfo.stackHash");
	Если АппСтэк <> Неопределено Тогда
		// Ошибка возникла в коде конфигурации
		ТекстОшибки = ЗначениеСвойства(ИнформацияОтчетаСтруктура, "errorInfo.applicationErrorInfo");
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ТекстОшибки);
		СтрокаОшибки = ЗаписьJSON.Закрыть();
		
		ТекЗадача = СоздатьЗадачу(ИнформацияОтчетаСтруктура, СтрокаОшибки);
		
		ддОтчет = ПолучитьДвоичныеДанныеИзСтроки(ИнформацияОтчета.Report, "UTF-8");
		ддСкрин = ИнформацияОтчета.Screenshot.Получить();
		ПрицепитьФайлы(ТекЗадача, ддОтчет, ддСкрин);
		
		ХэшОшибки = "" 	+ ИнформацияОтчетаСтруктура.configInfo.hash + "-" 
		+ ИнформацияОтчетаСтруктура.errorInfo.systemErrorInfo.clientStackHash + "-" 
		+ АппСтэк;
		
		ЗаписатьОшибкуВРегистр(ТекЗадача, ХэшОшибки);
		
	Иначе
		// ошибка возникла во внешнем отчете или обработке
		СтрокаОшибки =	ИнформацияОтчетаСтруктура.errorInfo.applicationErrorInfo.errors[0][0] 
		+ Символы.ПС  
		+ ИнформацияОтчетаСтруктура.errorInfo.applicationErrorInfo.errors[1][0];
		АппСтэк  = Новый ХешированиеДанных(ХешФункция.SHA1) ;
		АппСтэк.Добавить(СтрокаОшибки);
		ХэшАппСтэк = СтрЗаменить(АппСтэк.ХешСумма, " ", "");
		
		ХэшОшибки = "" 	+ ИнформацияОтчетаСтруктура.configInfo.hash + "-" 
		+ ИнформацияОтчетаСтруктура.errorInfo.systemErrorInfo.clientStackHash + "-" 
		+ ХэшАппСтэк;
		
		НайденныйХэш = НайтиХэш(ХэшОшибки);
		
		Если НайденныйХэш <> Неопределено Тогда
			// Ошибка во внешней обработке. Такая ошибка уже зарегистрирована. 
			// Ничего делать не надо
			Возврат;
		Иначе 
			ТекЗадача = СоздатьЗадачу(ИнформацияОтчетаСтруктура, СтрокаОшибки);
			
			ддОтчет = ПолучитьДвоичныеДанныеИзСтроки(ИнформацияОтчета.Report, "UTF-8");
			ддСкрин = ИнформацияОтчета.Screenshot.Получить();
			ПрицепитьФайлы(ТекЗадача, ддОтчет, ддСкрин);
			
			ХэшОшибки = "" 	+ ИнформацияОтчетаСтруктура.configInfo.hash + "-" 
			+ ИнформацияОтчетаСтруктура.errorInfo.systemErrorInfo.clientStackHash + "-" 
			+ ХэшАппСтэк;
			
			ЗаписатьОшибкуВРегистр(ТекЗадача, ХэшОшибки);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ОбработатьДамп

Функция ЗначениеСвойства(Структура, ПутьКСвойству) Экспорт
	
	Путь = СтрРазделить(ПутьКСвойству, ".", Ложь);
	
	ТекущийОбъект = Структура;
	
	Для Каждого ЧастьПути Из Путь Цикл 
		Если Не ТекущийОбъект.Свойство(ЧастьПути) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекущийОбъект = ТекущийОбъект[ЧастьПути];
		
	КонецЦикла;
	
	Возврат ТекущийОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ЗаписатьОшибкуВРегистр(ТекЗадача, ХэшОшибки);
//
// Описание: Записывает в регистр сведений текущую ошибку
//				В дальнейшем по хэшу проверяет не зарегистрирована ли ошибка ранее
//
// Параметры:
//				ТекЗадача - Справочники.узЗадачи - ссылка на задачу по ошибке
//				ХэшОшибки - Строка - уникальный хэш ошибки (одинаковый для одной и той же ошибки)
//
Процедура ЗаписатьОшибкуВРегистр(ТекЗадача, ХэшОшибки)
	ТекЗапись = РегистрыСведений.РегОш_Ошибки.СоздатьМенеджерЗаписи();
	ТекЗапись.Хэш = ХэшОшибки;
	ТекЗапись.Прочитать();
	ТекЗапись.Задача = ТекЗадача;
	ТекЗапись.Записать();
	
КонецПроцедуры // ЗаписатьОшибкуВРегистр

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПрицепитьФайл
//
// Описание: Прицепляет к задаче файл отчета и скриншот
//
//
// Параметры:
//			ТекЗадача - Справочник.узЗадачи - владелец файлов
//			пОтчет - Двоичные данные - XML отчета в виде двоичных данных
//			пСкриншот - Двоичные данные - скриншот в виде двоичных данных
//
//
Процедура ПрицепитьФайлы(ТекЗадача, пОтчет, пСкриншот)
	Структура = Новый Структура;
	Структура.Вставить("Автор", ТекЗадача.Автор);
	Структура.Вставить("ВладелецФайлов", ТекЗадача);
	Структура.Вставить("ВремяИзмененияУниверсальное", ТекущаяДатаСеанса());
	
	// Добавляем report.json
	Структура.Вставить("ИмяБезРасширения", "Report");
	Структура.Вставить("РасширениеБезТочки", "json");
	АдресОтчет = ПоместитьВоВременноеХранилище(пОтчет, Новый УникальныйИдентификатор);
	РаботаСФайлами.ДобавитьФайл(Структура, АдресОтчет, "report.json");
	
	// Добавляем скриншот
	Структура.Вставить("ИмяБезРасширения", "Sreenshot");
	Структура.Вставить("РасширениеБезТочки", "png");
	АдресСкрин = ПоместитьВоВременноеХранилище(пСкриншот, Новый УникальныйИдентификатор);
	РаботаСФайлами.ДобавитьФайл(Структура, АдресСкрин, "Screenshot.png");
	
КонецПроцедуры // ПрицепитьФайл

////////////////////////////////////////////////////////////////////////////////
//
// Функция СоздатьЗадачу
//
// Описание: Создает задачу из структуры отчета об ошмбке
//
//
// Параметры:
// ИнформацияОтчетаСтруктура - Структура - из XML файла report.json
// СтрокаОшибки - Строка - строка для описания ошибки в задаче
//
// Возвращаемое значение:
//  	Справочник.узЗадачи.Ссылка - ссылка на созданный документ
//
Функция СоздатьЗадачу(ИнформацияОтчетаСтруктура, СтрокаОшибки)
	ФД = Новый ФорматированныйДокумент;
	ИмяПриложения = ЗначениеСвойства(ИнформацияОтчетаСтруктура, "configInfo.description");
	ИмяПользователя = ЗначениеСвойства(ИнформацияОтчетаСтруктура, "sessionInfo.userName");
	
	ДокНаименование = 	"У пользователя " 
	+ ИмяПользователя 
	+ " возникла ошибка в " 
	+ ИмяПриложения;
	
	Элем = ФД.Добавить(ДокНаименование);
	Элем = фд.Добавить(Символы.ПС + Символы.ПС);
	Элем = ФД.Добавить(СтрокаОшибки);
	
	ДокЗадача = Справочники.узЗадачи.СоздатьЭлемент();
	ДокЗадача.Наименование = ДокНаименование;
	ДокЗадача.Содержание = Новый ХранилищеЗначения(ФД);
	
	ДокЗадача.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст");
	ДокЗадача.Автор = Пользователи.ТекущийПользователь();
	ДокЗадача.Важность = ПредопределенноеЗначение("Справочник.узВариантыВажностиЗадачи.Обычная");
	ДокЗадача.Статус = ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.ЗапросНаДобавление");
	ДокЗадача.ПоказыватьВОтчетахИКанбанДоске = Истина;
	ДокЗадача.Исполнитель = ДокЗадача.Автор;
	ДокЗадача.Записать();
	
	// Второй раз записываем, чтобы С пустым Родителем уставноить ЭтоОсновнаяЗадача в Ложь
	ДокЗадача.ЭтоОсновнаяЗадача = Ложь;
	ДокЗадача.Записать();
	
	Возврат ДокЗадача.Ссылка;    
КонецФункции // СоздатьЗадачу

Функция ПолучитьИнформациюИзОтчета(ДанныеОтчета) 
	
	Отчет = Неопределено;
	ОтчетСтруктура = Неопределено;
	Скриншот = Неопределено;
	
	ЧтениеZip = Новый ЧтениеZipФайла(ДанныеОтчета.ОткрытьПотокДляЧтения());
	Для Каждого Элемент Из ЧтениеZip.Элементы Цикл 
		Если Элемент.Имя = "report.json" Тогда
			ПутьКПапкеReportJson = ПолучитьИмяВременногоФайла();
			ЧтениеZip.Извлечь(Элемент, ПутьКПапкеReportJson);
			
			ЧтениеТекста = Новый ЧтениеТекста(ПутьКПапкеReportJson + ПолучитьРазделительПути() + "report.json", 
												КодировкаТекста.UTF8);
			Отчет = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			ЧтениеJson = Новый ЧтениеJSON();
			ЧтениеJson.ОткрытьФайл(ПутьКПапкеReportJson + ПолучитьРазделительПути() + "report.json");
			ОтчетСтруктура = ПрочитатьJSON(ЧтениеJson);			
			ЧтениеJson.Закрыть();
			
			УдалитьФайлы(ПутьКПапкеReportJson);
		ИначеЕсли Элемент.Имя = "screenshot.png" Тогда
			ПутьКПапкеScreenshot = ПолучитьИмяВременногоФайла();
			ЧтениеZip.Извлечь(Элемент, ПутьКПапкеScreenshot);
			Картинка = Новый ДвоичныеДанные(ПутьКПапкеScreenshot + ПолучитьРазделительПути() + "screenshot.png");
			Скриншот = Новый ХранилищеЗначения(Картинка);
			УдалитьФайлы(ПутьКПапкеScreenshot);
		Иначе
			// ничего не делаем. Других файлов в архиве нет.
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Report, ReportStructure, Screenshot", Отчет, ОтчетСтруктура, Скриншот); 
	
КонецФункции

Функция НайтиХэш(ХэшОшибки) Экспорт 
	Рез = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегОш_Ошибки.Хэш КАК Хэш,
	|	РегОш_Ошибки.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.РегОш_Ошибки КАК РегОш_Ошибки
	|ГДЕ
	|	РегОш_Ошибки.Хэш = &Хэш";
	
	Запрос.УстановитьПараметр("Хэш", ХэшОшибки);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Рез = РезультатЗапроса.Задача;	
	КонецЦикла;  
	
	Возврат Рез;	
КонецФункции

